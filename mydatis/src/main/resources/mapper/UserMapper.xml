<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <!-- 
  		创建mapper的配置文件与表中的数据相对应
  		namespace属性值为类的完全限定名	
   -->
  <mapper namespace="com.kaishengit.mapper.UserMapper">
  	<!-- 开启二级缓存  -->
  	<cache/>
  	<!-- 
  		或者用LRU淘汰算法刷新缓存 
  	<cache readOnly="true" size="2048" flushInterval="60" eviction="FIFO"/>
  		-->
  	<!-- 
  		或者在 Mapper配置文件中的select语句中,添加一个useCache=false 这个sql可禁止被缓存 
  		在insert update delete 节点中添加 flushCache = false 可禁止缓存
  		-->
  		
  	<sql id="allColumns">
  		id,dept_id,user_name,user_age,address,password
  	</sql>
  	<!-- sql语句 -->
  	<!-- 根据id查询User对象 -->
  <!-- 	<select id="findById" parameterType="int" resultType="User" >
  		select * from t_user where id = #{id}
  	</select>
  	<insert id="save" parameterType="User">
  		insert into t_user(user_name,user_age,address) 
  		values(#{userName},#{userAge},#{address})
  	</insert>
  	
  	<update id="update" parameterType="User">
  		update t_user set user_name = #{userName},user_age = #{userAge},address = #{address}
  		where id = #{id}
  	</update> -->
  	<delete id="delById" parameterType="int">
  		delete from t_user where id = #{id}
  	</delete>
  	<select id="findAll" resultType="User">
  		select * from t_user
  	</select>
  	<!-- ongl 进行映射 -->
  	<select id="findAllLoadDept" resultType="User">
  		select 
  				t_user.id,
  				user_name,
  				user_age,
  				address,
  				dept_id,
  				t_dept.id as `dept.id`,
  				t_dept.dept_name as `dept.deptName`
  		from 
  				t_user,t_dept
  		where 
  				t_user.dept_id = t_dept.id
  				
  	</select>
  	<update id="updateById" parameterType="int">
  		update t_user set user_name = "jack"
  		where id = #{id}
  	</update>
  	<select id="findIdByNameAndPassword" resultType="User">
  		select * from t_user where user_name = #{userName} and password = #{password}
  	</select>
  	
  	<select id="findByMapParam" parameterType="map" resultType="User">
  		select
  		<include refid="allColumns" />
  		from t_user where user_name = #{name} and password = #{password}
  	</select>
  	<select id="searchByNameAndAddress" parameterType="map" resultType="User">
  		select 
  			<include refid="allColumns" />
  		from t_user 
  			<where>
  				<if test="name !=null and name != ''">
  					user_name = #{name}
  				</if>
  				<if test="address != null and address != ''">
  					and address = #{address}
  				</if>
  			</where>
  	</select>
  	
  	<select id="searchByNameAndPassword" parameterType="map" resultType="User">
  		select 
  			<include refid="allColumns" />
  		from t_user
  			<trim prefix="where" prefixOverrides="and|or">
  				<if test="name != null and name != ''">
  					user_name = #{name}
  				</if>
  				<if test="password != null and password != ''">
  					and password = #{password}
  				</if>
  			</trim>
  	
  	</select>
  	
  	<delete id="delByIds" parameterType="list">
  		delete from t_user where id in (
  		<foreach collection="list" item="id" separator=",">
  			#{id}
  		</foreach>
  		)
  	</delete>
  	<select id="findByNameAndPassword" parameterType="map" resultType="User">
  		select 
  				<include refid="allColumns" />
  		from t_user
  		<where>
  			<if test="name != null and name != ''">
  				user_name = #{name}
  			</if>
  			<if test="passowrd != null and password != ''">
  				and password = #{password}
  			</if>
  		</where> 
  	</select>
  	<insert id="batchSave" parameterType="List" useGeneratedKeys="true" keyProperty="id">
  		insert into t_user(dept_id,user_name,user_age,address,password) values
  		<foreach collection="list" item="user" separator=",">
  			(#{user.deptId},#{user.userName},#{user.userAge},#{user.address},#{user.password})
  		</foreach>
  	</insert>
  	<!-- <select id="findAllLoadDept" resultMap="userMap">
		select t_user.id,user_name,user_age,address,dept_id,dept_name from t_user,t_dept
		where t_user.dept_id = t_dept.id
	</select> 
  	自定义结果集映射，告诉MyBatis如何将列和类的属性对应
  	<resultMap type="User" id="userMap">
  		<id column="id" property="id"/>
  		<result column="user_name" property="userName"/>
  		<result column="user_age" property="userAge"/>
  		<result column="address" property="address"/>
  		<result column="dept_id" property="deptId"/>
  		<association property="dept" javaType="Dept">
  			<id column="dept_id" property="id"/>
  			<result column="dept_name" property="deptName"/>
  		</association>
  	</resultMap> -->
  	
  </mapper>